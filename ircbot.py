# coding: utf8

"""
ircbot.py
--------

Here's the definition of the IrcBot class.
"""

import socket

import malooapi
import maloobot

class IrcBot:
    """
    This is simple class that is able to connect to the an irc server,
    set a nick / username / realname, join a list of channels
    and that embeds a MalooBot object in order to communicate in the chat.
    """
    def __init__(self, config):
        config_irc = config["irc"]

        self.server = config_irc["server"]
        self.port = config_irc["port"]
        self.nick = config_irc["nick"]
        self.username = config_irc["username"]
        self.realname = config_irc["realname"]
        self.password = config_irc["password"]
        self.channels = config_irc["channels"].strip().split(",")
        self.admins = config_irc["admins"].strip().split(",")
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.now_learning = True
        self.running = True

        self.maloo = maloobot.MalooBot(config["sql"])
        self.api = malooapi.MalooApi(config["api"])

    def on_ping(self, server):
        """ Answers to PING requests """
        self.socket.send(bytes("PONG :{}\r\n".format(server), 'UTF-8'))

    def on_join(self, username, channel):
        """ Not used. To execute when a JOIN command is received """
        print(username + " joined " + channel)

    def on_privmsg(self, user, channel, message):
        """ Handles PRIVMSG command """
        if user == self.nick:
            return

        words = message.split(" ")
        nb_of_words = len(words)

        if words[0] == "!quit" and user in self.admins:
            print(user + " ordered me to quit, bye !")
            self.disconnect("Je vous en prie.")
            self.running = False

        elif words[0] == "!maloo_text":
            if nb_of_words > 1:
                query = message.replace(words[0], "")
                self.privmsg(channel, self.maloo.generate_answer(query))
            else:
                self.privmsg(channel, self.maloo.generate_sentence())

        elif words[0] == "!maloo_image":
            hint = words[1] if nb_of_words > 1 else ""
            query = message.replace(words[0], "")

            # Google
            try:
                image_url = self.api.find_on_googleimage(query)
            except Exception:
                self.privmsg(channel, "La flemme ...")
                return
            # Maloo
            try:
                image_path = self.maloo.generate_image(image_url, "./fonts/coolvetica.ttf", hint)
            except Exception:
                self.privmsg(channel, "Imprimante bloquée, bourrage papier ...")
                return
            # Imgur
            try:
                imgur_url = self.api.upload_to_imgur(image_path)
            except Exception:
                self.privmsg(channel, "Imgur ne me répond pas :(")
                return
            # Twitter
            self.api.post_on_tweet("Image generated by {} : {}".format(user, imgur_url))
            # IRC
            self.privmsg(channel, imgur_url)

        elif words[0] == "!learn" and user in self.admins:
            if self.now_learning:
                self.privmsg(channel, "Argh, la flemme s'empare de moi ...")
                self.now_learning = False
            else:
                self.privmsg(channel, "J'écoute !")

        elif words[0] == "!count":
            self.privmsg(channel, """Je connais {} couples de mots
                                         """.format(self.maloo.db_count_base()))
        elif words[0] == "!help":
            self.privmsg(channel, "List of available commands :")
            self.privmsg(channel, """!maloo_image -
                                             Generate an image with some awesome text on it.""")
            self.privmsg(channel, """!maloo_text -
                                             Generate a perfectly written sentence
                                            and sends it in this channel.""")
            self.privmsg(channel, """!count -
                                             Display the number of couple of words
                                            currently present in the database.""")
            self.privmsg(channel, "!learn - Teach me your ways, Sensei (ADMIN ONLY)")
            self.privmsg(channel, "!quit - Pls no. (ADMIN ONLY)")

        elif message.find(self.nick) > -1:
            message = message.replace(self.nick, "")
            self.privmsg(channel, """{}: {}
                                         """.format(user, self.maloo.generate_answer(message)))

        elif self.now_learning and nb_of_words > 3 and message[0].isalpha():
            self.maloo.learnfrom_sentence(message)

    def connect(self, server, port):
        """ Connection to the server """
        print("Connecting to {}:{}".format(server, port))
        try:
            self.socket.connect((server, port))
        except socket.error:
            raise socket.error

    def disconnect(self, message="Leaving"):
        """ Disconnection from the server """
        self.socket.send(bytes("QUIT :{}\r\n".format(message), 'UTF-8'))
        self.socket.close()

    def privmsg(self, destination, message):
        """ Send a message """
        self.socket.send(bytes("PRIVMSG {} :{}\r\n".format(destination, message), 'UTF-8'))

    def join(self, channel):
        """ Join a channel """
        self.socket.send(bytes("JOIN {}\r\n".format(channel), 'UTF-8'))

    def setnick(self, nickname):
        """ Set nick """
        self.socket.send(bytes("NICK {}\r\n".format(nickname), 'UTF-8'))

    def setuser(self, username, realname):
        """ Set username and realname """
        self.socket.send(bytes("USER {0} {0} {0} :{1}\r\n".format(username, realname), \
                                        'UTF-8'))

    def start(self):
        """ Main loop """
        try:
            self.connect(self.server, int(self.port))
        except socket.error:
            print("Can't connect to the server !")
            return

        self.setnick(self.nick)
        self.setuser(self.username, self.realname)

        # Joining channels
        for channel in self.channels:
            self.join(channel)

        # Main loop
        while self.running:
            data = self.socket.recv(2048)
            packets = data.split(b"\r\n")
            for packet in packets:
                try:
                    sdata = packet.decode("utf-8")
                except UnicodeDecodeError:
                    print("Error while decoding, skipping packet")
                    continue
                fields = sdata.split(':', 2)
                nb_of_fields = len(fields)
                if nb_of_fields > 1:
                    cmd_args = fields[1].split(' ')
                    nb_of_args = len(cmd_args)

                    if nb_of_args > 1:
                        if cmd_args[1] == "PRIVMSG":
                            username = fields[1].split('!', 1)[0]
                            message = fields[2]
                            self.on_privmsg(username, cmd_args[2], message)

                        elif cmd_args[1] == "JOIN":
                            username = fields[1].split('!', 1)[0]
                            self.on_join(username, cmd_args[2])

                    if fields[0].strip() == "PING":
                        server = fields[1]
                        self.on_ping(server)

        self.disconnect("Chelou.")
        print("Disconnected !")
